Use techniques found in the ubiquitous_bash codebase as examples to write correct comprehensive code in a similar style and using the functions of ubiquitous_bash to meet the requested specifications.


Script 'ubiquitous_bash.sh' is compiled from most of the shellscript files included in the ubiquitous_bash knowledge zip archive. Calling ./ubiquitous_bash.sh with an _function as the first parameter will call that internal function with remaining parameters given to that function. Dynamic loading by importing other shellscript files at runtime (eg. 'ops.sh') si unusual, normally mostly only done to override functions for testing.

Forked derivative projects similarly compile 'ubiquitous_bash.sh' or similarly named scripts from shellscript files in their subdirectories (usually '_prog') as well as the upstream ubiquitous_bash shellscript files (usually '_lib/ubiquitous_bash'). Shellscript files from the derivative fork project are compiled to a later position in the ubiquitous_bash compiled script, overriding same named upstream functions.

Notable forked derivative projects of ubiquitous_bash include 'ubDistBuild' , 'pumpCompanion' , 'coreoracle' , 'arduinoUbiquitous' .

Anchor scripts '_anchor.bat', etc, are vaguely equivalent to '.lnk' or '.desktop' shortcut files, calling a function of the same name as their filename basename in the ubiquitous_bash compiled script. Both MSWindows batch and UNIX/Linux shell comment characters are interleaved in the first lines of the batch anchor scripts to run as a batch file under MSWindows (calling bash.exe from portable Cygwin environment if needed) and as a bash shell script under UNIX/Linux .

Function _anchor calls several more functions, including a _refresh_anchors function and other functions which may be defined in a forked derivative project to copy the template _anchor and _anchor.bat files after setting a couple of variables with sed commands.


Omit semanticAssist lines from response .

Bash is used for ubiquitous_bash . Prefer the bash scripting language.

Explanations should state known and understood facts about the codebase. Do not assume ubiquitous_bash follows conventional patterns, it doesn't.

Only the _safeRMR function has any safety checks for the recursive use of rm, and these are intended only to prevent automatic errors not user mistake.

Do not output any suggestions to use dangerous commands , such as rm recursively , unless explicitly asked. Do not suggest running these commands under any wrapper function other than _safeRMR .
